<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
          rel="stylesheet" crossorigin="anonymous"/>

    <script src="https://cdn.jsdelivr.net/npm/vue@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue-demi"></script>
    <script src="https://cdn.jsdelivr.net/npm/@vuelidate/core"></script>
    <script src="https://cdn.jsdelivr.net/npm/@vuelidate/validators"></script>
</head>

<body>
<div id="app">
    <form style="max-width: 400px; margin: 100px auto" @submit.prevent="onSubmit">

        <p class="text-center">
            <a href="/">
                {% include 'icons/logo.twig' with {'size': '60px'} %}
            </a>
        </p>

        <div class="alert alert-danger alert-dismissible" v-if="message">
            <button type="button" class="btn-close" @click="message=null"></button>
            <p class="mb-0">${ message }</p>
        </div>

        <div class="mb-2">
            <label class="form-label" for="username">Username:</label>
            <input class="form-control" type="text" id="username" v-model="form.username"
                   :class="{'is-invalid': v$.username.$error }">
            <p v-for="e of v$.username.$errors" :key="e.$uid" class="text-danger small mb-0">
                ${e.$message}
            </p>
        </div>

        <div class="mb-2">
            <label class="form-label" for="password">Password:</label>
            <input class="form-control" type="password" id="password" v-model="form.password"
                   :class="{'is-invalid': v$.password.$error }">
            <p v-for="e of v$.password.$errors" :key="e.$uid" class="text-danger small mb-0">
                ${e.$message}
            </p>
        </div>

        <button class="btn btn-primary" type="submit">Login</button>
    </form>
</div>

<script>
    const {createApp, ref, reactive} = Vue;
    const {useVuelidate} = Vuelidate;
    const {helpers: {withMessage, regex}, required, minLength, maxLength} = VuelidateValidators;

    createApp({
        delimiters: ['${', '}'],
        setup() {
            const message = ref('')
            const processing = ref(false)
            const form = reactive({
                username: '',
                password: ''
            })

            // a frontend validation example
            const rules = {
                username: {
                    required: withMessage('Field is required', required),
                    minLength: withMessage('Must be at least 5 characters long', minLength(5)),
                    maxLength: withMessage('Not more than 20 characters long', maxLength(20)),
                    regex: withMessage('Must be alphanumeric', regex(/^[a-zA-Z0-9]+$/))
                },
                password: {
                    required: withMessage('Field is required', required),
                    minLength: withMessage('Must be at least 5 characters long', minLength(5)),
                    maxLength: withMessage('Not more than 20 characters long', maxLength(20))
                },
            }

            const v$ = useVuelidate(rules, form);

            const onSubmit = () => {
                v$.value.$validate()
                    .then((isValid) => {
                        if (isValid) {
                            sendRequest()
                        }
                    })
            }

            const sendRequest = () => {
                message.value = '';
                processing.value = true;

                fetch('/login', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(form)
                })
                    .then(response => {
                        const ctx = response.headers.get('Content-Type');
                        if (ctx && ctx.includes('application/json')) {
                            return response.json();
                        } else {
                            throw new Error(response.statusText);
                        }
                    })
                    .then(data => {
                        if (data.status === 'success') {
                            window.location.href = data.redirect || '/';
                        } else {
                            throw new Error(data.message);
                        }
                    })
                    .catch(error => message.value = error.message)
                    .finally(() => processing.value = false);
            }

            return {message, processing, form, onSubmit, v$}
        }
    }).mount("#app")
</script>

</body>
</html>
